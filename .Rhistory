> x = rbind(c(1, -1/4), c(-1/4, 1))
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m = makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
inverseMatrix <- NULL
set <- function(y) {
x <<- y
inverseMatrix <<- NULL
}
get <- function() x
setinverseMatrix <- function(inverse) inverseMatrix <<- inverse
getinverseMatrix <- function() inverseMatrix
list(set=set, get=get,
setinverse=setinverse,
getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inverseMatrix)) {
message("getting cached data.")
return(inverseMatrix)
}
data <- x$get()
inverseMatrix <- solve(data)
x$setinverse(inverseMatrix)
inverseMatrix
## Return a matrix that is the inverse of 'x'
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
x
m = makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
x
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
inverseMatrix <- NULL
set <- function(y) {
x <<- y
inverseMatrix <<- NULL
}
get <- function() x
setinverseMatrix <- function(inverse) inverseMatrix <<- inverse
getinverseMatrix <- function() inverseMatrix
list(set=set, get=get,
setinverse=setinverse,
getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
inverseMatrix <- x$getinverse()
if(!is.null(inverseMatrix)) {
message("getting cached data.")
return(inverseMatrix)
}
data <- x$get()
inverseMatrix <- solve(data)
x$setinverse(inverseMatrix)
inverseMatrix
## Return a matrix that is the inverse of 'x'
}
x = rbind(c(1, -1/4), c(-1/4, 1))
x
matrixx=makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
## Return a matrix that is the inverse of 'x'
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("inverse has already been calculated so retrieving the inverse from the cache")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
# Return a matrix that is the inverse of 'x'
}
x = cbind(c(0.234, -5), c(1, 1.76))
x
m = makeCacheMatrix(x)
m
m$get()
cacheSolve(m)
cacheSolve(m)
